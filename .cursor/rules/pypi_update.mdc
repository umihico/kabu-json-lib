---
description: 
globs: 
alwaysApply: false
---
# PyPIパッケージ更新手順

1. **変更差分の確認**
   - `git diff`で現在の変更点を確認する。

2. **実装・修正**
   - 新機能や修正を実装する。
   - 必要な依存パッケージがあれば`pyproject.toml`の`dependencies`に追加する。
   - **新しい関数やクラスをパッケージのトップレベルでimportしたい場合は、`__init__.py`に必ず追記する。**

3. **README更新**
   - 新機能や修正内容を`README.md`に反映する。
   - 使い方の例も追加する。

4. **テスト実行**
   - `python -m pytest tests/` でユニットテストを実行し、全てパスすることを確認する。
   - `python test.py` などで全体の動作確認も行う。

5. **バージョン更新**
   - `pyproject.toml`の`version`を新しいバージョンに更新する。

6. **ビルド前のクリーンアップ**
   - 古いビルドファイルを削除する。
     ```bash
     rm -rf dist/* kabu_json_lib.egg-info/*
     rm -rf __pycache__ kabu_json_lib/__pycache__ tests/__pycache__
     ```

7. **ビルド**
   - `python -m build` でパッケージをビルドする。

8. **PyPIアップロード**
   - `twine upload dist/*` でPyPIにアップロードする。
   - 「File already exists」エラーが出た場合は、バージョンを上げて再ビルド・再アップロードする。
   - アップロード後、PyPIの該当バージョンページで公開を確認する。

9. **コミット**
   - 変更内容をコミットする。
   - コミットメッセージは「feat: 機能追加」や「fix: バグ修正」など分かりやすく記述する。

10. **プッシュ**
    - `git push` でリモートリポジトリに変更を反映する。

---

## 注意
- `__init__.py`のエクスポート忘れは特に注意。新しい関数・クラスを外部からimportできるようにしたい場合は、必ず`__init__.py`に追記すること。
- distやegg-infoなどの古いビルドファイルが残っているとPyPIアップロード時にエラーになるため、必ずクリーンアップしてからビルドすること。
